--5. Devuelve las 20 duraciones de películas más frecuentes, ordenados de mayor a menor
--SELECT MOVIE_DURATION, COUNT (*) AS FREQ FROM MOVIES GROUP BY MOVIE_DURATION ORDER BY FREQ DESC LIMIT 20;
--6. Devuelve las películas del año 2000 en adelante que empiecen por la letra A.
--SELECT * FROM MOVIES WHERE YEAR(MOVIE_RELEASE_DATE) >=2000 AND MOVIE_NAME LIKE 'A%' ORDER BY MOVIE_NAME;
--7. Devuelve los actores nacidos un mes de Junio
--SELECT ACTOR_NAME, ACTOR_BIRTH_DATE FROM ACTORS WHERE MONTH(ACTOR_BIRTH_DATE)= 6;
--8. Devuelve los actores nacidos cualquier mes que no sea Junio y que sigan vivos
--SELECT ACTOR_NAME, ACTOR_BIRTH_DATE FROM ACTORS WHERE MONTH(ACTOR_BIRTH_DATE )!= 6 AND ACTOR_DEAD_DATE IS NULL;
--9. Devuelve el nombre y la edad de todos los directores menores o iguales de 50 años que estén vivos
--SELECT DIRECTOR_NAME, DATEDIFF(YEAR,DIRECTOR_BIRTH_DATE, TODAY() ) AS "AGE"FROM DIRECTORS WHERE DATEDIFF(YEAR, DIRECTOR_BIRTH_DATE, TODAY()) <= 50 AND DIRECTOR_DEAD_DATE IS NULL;
--10. Devuelve el nombre y la edad de todos los actores menores de 50 años que hayan fallecido
--SELECT * FROM ACTORS WHERE ACTOR_BIRTH_DATE >='1975-01-01' AND ACTOR_DEAD_DATE IS NULL
--11. Devuelve el nombre de todos los directores menores o iguales de 40 años que estén vivos
--SELECT DIRECTOR_NAME, DIRECTOR_BIRTH_DATE FROM DIRECTORS WHERE DIRECTOR_DEAD_DATE IS NULL AND DATEDIFF(YEAR, DIRECTOR_BIRTH_DATE, TODAY()) <=40;
--12. Indica la edad media de los directores vivos
--SELECT AVG(DATEDIFF(YEAR, DIRECTOR_BIRTH_DATE, TODAY())) AS AVG_AGE FROM DIRECTORS WHERE DIRECTOR_DEAD_DATE IS NULL;
--13. Indica la edad media de los actores que han fallecido
--SELECT AVG(DATEDIFF(YEAR, ACTOR_BIRTH_DATE, TODAY())) AS "AVG_AGE" FROM ACTORS WHERE ACTOR_DEAD_DATE IS NOT NULL;
--14. Devuelve el nombre de todas las películas y el nombre del estudio que las ha realizado
--SELECT MOVIE_NAME, STUDIO_NAME FROM MOVIES LEFT JOIN STUDIOS ON STUDIO_ID = STUDIO_ID ORDER BY STUDIO_NAME, MOVIE_NAME;
--15.  Devuelve los miembros que accedieron al menos una película entre el año 2010 y el 2015
--SELECT DISTINCT(u.USER_NAME)  FROM USERS u INNER JOIN USER_MOVIE_ACCESS uma ON u.USER_ID = uma.USER_ID WHERE YEAR(UMA.ACCESS_DATE) >= 2010 AND YEAR(UMA.ACCESS_DATE) <= 2015
--16. Devuelve cuantas películas hay de cada país
--SELECT NATIONALITY_NAME, COUNT(NATIONALITY_ID) AS TOTAL_PELICULAS FROM NATIONALITIES INNER JOIN MOVIES ON NATIONALITY_ID =NATIONALITY_ID GROUP BY NATIONALITY_NAME;
--17. Devuelve todas la películas creadas por directires nacidos a partir de 1980 y que todavía estan vivos
--SELECT m.MOVIE_NAME FROM MOVIES m JOIN GENRES g ON m.GENRE_ID = g.GENRE_ID WHERE g.GENRE_ID = ( SELECT GENRE_ID  FROM GENRES WHERE GENRE_NAME LIKE 'Documentary' )
--18. Devuelve todas las películas creadas por directores nacidos a partir de 1980 y que todavía están vivos
--SELECT MOVIE_NAME FROM MOVIES INNER JOIN DIRECTORS ON DIRECTOR_ID=DIRECTOR_ID WHERE YEAR(DIRECTOR_BIRTH_DATE) > 1980;
--19. Indica si hay alguna coincidencia de nacimiento de ciudad (y si las hay, indicarlas) entre los miembros de la plataforma y los directores
--SELECT USER_NAME, DIRECTOR_NAME, USER_TOWN AS CIUDAD FROM USERS JOIN DIRECTORS ON USER_TOWN = DIRECTOR_BIRTH_PLACE;
--20. Devuelve el nombre y el año de todas las películas que han sido producidas por un estudio que actualmente no esté activo
--SELECT MOVIE_NAME, YEAR(MOVIE_RELEASE_DATE) AS YEAR FROM MOVIES INNER JOIN STUDIOS ON STUDIO_ID = STUDIO_ID WHERE STUDIO_ACTIVE = FALSE;
--21.Devuelve una lista de las últimas 10 películas a las que se ha accedido
--SELECT MOVIE_NAME, ACCESS_DATE FROM USER_MOVIE_ACCESS uma JOIN MOVIES m ON uma.MOVIE_ID = m.MOVIE_ID ORDER BY uma.ACCESS_DATE DESC LIMIT 10;
--22. Indica cuántas películas ha realizado cada director antes de cumplir 41 años
--SELECT d.DIRECTOR_NAME, COUNT(m.MOVIE_ID) AS NUM_MOVIES FROM MOVIES m JOIN DIRECTORS d ON m.DIRECTOR_ID = d.DIRECTOR_ID WHERE DATEDIFF(YEAR, d.DIRECTOR_BIRTH_DATE, m.MOVIE_RELEASE_DATE) < 41 GROUP BY (d.DIRECTOR_NAME)
--23- Indica cuál es la media de duración de las películas de cada director
SELECT DIRECTOR_NAME, AVG(MOVIE_DURATION)
FROM DIRECTORS d 
INNER JOIN MOVIES m ON d.DIRECTOR_ID = m.DIRECTOR_ID 
GROUP BY d.DIRECTOR_NAME;

--24- Indica cuál es la el nombre y la duración mínima de las películas a las que se ha accedido en los últimos 2 años por los miembros del plataforma (La “fecha de ejecución” de esta consulta es el 25-01-2019)
SELECT GROUP_CONCAT(M.MOVIE_NAME) AS MOVIE_NAME, M.MOVIE_DURATION FROM USER_MOVIE_ACCESS UMA INNER JOIN MOVIES M ON UMA.MOVIE_ID = M.MOVIE_ID WHERE DATEADD(YEAR, -2, DATE '2019-01-25') < UMA.ACCESS_DATE GROUP BY M.MOVIE_DURATION ORDER BY M.MOVIE_DURATION ASC

--25- Indica el número de películas que hayan hecho los directores durante las décadas de los 60, 70 y 80 que contengan la palabra “The” en cualquier parte del título
SELECT COUNT (MOVIE_ID) FROM MOVIES INNER JOIN DIRECTORS d ON d.DIRECTOR_ID  = d.DIRECTOR_ID WHERE MOVIE_RELEASE_DATE >= '1960-01-01' AND MOVIE_RELEASE_DATE <= DATE '1989-12-31' AND UPPER(MOVIE_NAME) LIKE '%THE%' GROUP BY d.DIRECTOR_NAME; 

SELECT D.DIRECTOR_NAME,
       COUNT(M.MOVIE_ID) AS MOVIE_NUMBER
FROM MOVIES M
INNER JOIN DIRECTORS D ON D.DIRECTOR_ID = M.DIRECTOR_ID
WHERE MOVIE_RELEASE_DATE >= DATE '1960-01-01'
  AND MOVIE_RELEASE_DATE <= DATE '1989-12-31'
  AND UPPER(M.MOVIE_NAME) LIKE '%THE%'
GROUP BY D.DIRECTOR_NAME

--DIFICULTAD: Difícil
--26- Lista nombre, nacionalidad y director de todas las películas
--SELECT m.movie_name, n.nationality_name, d.director_name FROM movies AS m JOIN nationalities AS n ON m.nationality_id = n.nationality_id JOIN directors AS d ON m.director_id = d.director_id;
 
--27- Muestra las películas con los actores que han participado en cada una de ellas
SELECT M.MOVIE_NAME, A.ACTOR_NAME
FROM MOVIES AS M JOIN MOVIES_ACTORS AS MA ON M.MOVIE_ID = MA.MOVIE_ID
JOIN ACTORS AS A ON A.ACTOR_ID = MA.ACTOR_ID

--28- Indica cual es el nombre del director del que más películas se ha accedido
SELECT
    D.DIRECTOR_NAME,
    COUNT(A.ACCESS_ID) AS TOTAL_ACCESOS
FROM USER_MOVIE_ACCESS A
JOIN MOVIES M ON A.MOVIE_ID = M.MOVIE_ID
JOIN DIRECTORS D ON M.DIRECTOR_ID = D.DIRECTOR_ID
GROUP BY D.DIRECTOR_NAME
ORDER BY TOTAL_ACCESOS DESC
LIMIT 1;


--29- Indica cuantos premios han ganado cada uno de los estudios con las películas que han creado
SELECT s.STUDIO_NAME ,sum(a.AWARD_WIN) AS NPREMIOS FROM MOVIES m INNER JOIN STUDIOS s  ON m.STUDIO_ID  =S.STUDIO_ID INNER JOIN AWARDS a ON m.MOVIE_ID = a.MOVIE_ID GROUP BY s.STUDIO_NAME ;

--30- Indica el número de premios a los que estuvo nominado un actor, pero que no ha conseguido (Si una película está nominada a un premio, su actor también lo está)
SELECT
	a2.ACTOR_NAME AS ACTOR,
	m.MOVIE_NAME AS MOVIE,
	SUM(a.AWARD_ALMOST_WIN) AS NOT_WON_NOMINATION
FROM
	AWARDS a
INNER JOIN
	MOVIES m
	ON
		a.MOVIE_ID = m.MOVIE_ID
INNER JOIN
	MOVIES_ACTORS ma
	ON
		m.MOVIE_ID = ma.MOVIE_ID
INNER JOIN
	ACTORS a2
	ON
		ma.ACTOR_ID = a2.ACTOR_ID
GROUP BY
	ACTOR,
	MOVIE
ORDER BY
	ACTOR,
	NOT_WON_NOMINATION;


SELECT
	a2.ACTOR_NAME AS ACTOR,
	SUM(a.AWARD_ALMOST_WIN) AS NOT_WON_NOMINATION
FROM
	AWARDS a
INNER JOIN
	MOVIES m
	ON
		a.MOVIE_ID = m.MOVIE_ID
INNER JOIN
	MOVIES_ACTORS ma
	ON
		m.MOVIE_ID = ma.MOVIE_ID
INNER JOIN
	ACTORS a2
	ON
		ma.ACTOR_ID = a2.ACTOR_ID
GROUP BY
	ACTOR
ORDER BY
	NOT_WON_NOMINATION;

--31- Indica cuantos actores y directores hicieron películas para los estudios no activos
SELECT COUNT(DISTINCT M.DIRECTOR_ID) AS DIRECTOR_NUMBER,
       COUNT(DISTINCT MA.ACTOR_ID) AS ACTOR_NUMBER
FROM STUDIOS S
INNER JOIN MOVIES M ON M.STUDIO_ID = S.STUDIO_ID
INNER JOIN MOVIES_ACTORS MA ON MA.MOVIE_ID = M.MOVIE_ID
WHERE S.STUDIO_ACTIVE = FALSE

--32- Indica el nombre, ciudad, y teléfono de todos los miembros de la plataforma que hayan accedido películas que hayan sido nominadas a más de 150 premios y ganaran menos de 50
SELECT DISTINCT U.USER_NAME,
                U.USER_TOWN,
                U.USER_PHONE
FROM USER_MOVIE_ACCESS UMA
INNER JOIN USERS U ON UMA.USER_ID = U.USER_ID
WHERE UMA.MOVIE_ID IN
    (SELECT MOVIE_ID
     FROM AWARDS
     WHERE AWARD_NOMINATION > 150
       AND AWARD_WIN < 50)

SELECT u.USER_NAME AS NOMBRE, u.USER_TOWN AS CIUDAD, u.USER_PHONE AS TELEFONO FROM USERS u JOIN USER_MOVIE_ACCESS uma ON u.USER_ID = uma.USER_ID JOIN MOVIES m ON uma.MOVIE_ID = m.MOVIE_ID JOIN AWARDS a ON m.MOVIE_ID = a.MOVIE_ID WHERE a.AWARD_NOMINATION > 150 AND a.AWARD_WIN < 50;       
       
--33- Comprueba si hay errores en la BD entre las películas y directores (un director muerto en el 76 no puede dirigir una película en el 88)
SELECT m.MOVIE_NAME, d.DIRECTOR_NAME, m.MOVIE_ID, d.DIRECTOR_ID
FROM MOVIES m
INNER JOIN DIRECTORS d ON d.DIRECTOR_ID=m.DIRECTOR_ID
WHERE d.DIRECTOR_DEAD_DATE < m.MOVIE_RELEASE_DATE

--34- Utilizando la información de la sentencia anterior, modifica la fecha de defunción a un año más tarde del estreno de la película (mediante sentencia SQL)

UPDATE DIRECTORS
SET DIRECTOR_DEAD_DATE =
  (SELECT MAX(DATEADD(YEAR, 1, M.MOVIE_RELEASE_DATE)) AS DIRECTOR_DEAD_DATE
   FROM MOVIES M
   INNER JOIN DIRECTORS D ON M.DIRECTOR_ID = D.DIRECTOR_ID
   WHERE D.DIRECTOR_DEAD_DATE IS NOT NULL
     AND D.DIRECTOR_DEAD_DATE < M.MOVIE_RELEASE_DATE
     AND D.DIRECTOR_ID = DIRECTORS.DIRECTOR_ID
   GROUP BY DIRECTOR_NAME,
            DIRECTOR_DEAD_DATE)
WHERE DIRECTOR_ID IN
    (SELECT DISTINCT D.DIRECTOR_ID
     FROM MOVIES M
     INNER JOIN DIRECTORS D ON M.DIRECTOR_ID = D.DIRECTOR_ID
     WHERE D.DIRECTOR_DEAD_DATE IS NOT NULL
       AND D.DIRECTOR_DEAD_DATE < M.MOVIE_RELEASE_DATE)

--DIFICULTAD: Berserk mode (enunciados simples, mucha diversión…)
--35- Indica cuál es el género favorito de cada uno de los directores cuando dirigen una película
 WITH GENRE_COUNTS AS
  (SELECT D.DIRECTOR_ID,
          D.DIRECTOR_NAME,
          G.GENRE_ID,
          G.GENRE_NAME,
          COUNT(*) AS NUM_MOVIES
   FROM MOVIES M
   INNER JOIN GENRES G ON M.GENRE_ID = G.GENRE_ID
   INNER JOIN DIRECTORS D ON M.DIRECTOR_ID = D.DIRECTOR_ID
   GROUP BY D.DIRECTOR_ID,
            D.DIRECTOR_NAME,
            G.GENRE_ID,
            G.GENRE_NAME),
     MAX_GENRE AS
  (SELECT DIRECTOR_ID,
          MAX(NUM_MOVIES) AS MAX_MOVIES
   FROM GENRE_COUNTS
   GROUP BY DIRECTOR_ID)
SELECT GC.DIRECTOR_NAME,
       GROUP_CONCAT(GC.GENRE_NAME) AS GENRE_NAME
FROM GENRE_COUNTS GC
INNER JOIN MAX_GENRE MG ON GC.DIRECTOR_ID = MG.DIRECTOR_ID
AND GC.NUM_MOVIES = MG.MAX_MOVIES
GROUP BY GC.DIRECTOR_NAME;      
       
--36- Indica cuál es la nacionalidad favorita de cada uno de los estudios en la producción de las películas
 SELECT STUDIO_NAME,
       GROUP_CONCAT(NATIONALITY_NAME) AS NATIONALITY_NAME
FROM
  (SELECT COUNT(N.NATIONALITY_ID) AS NUM_MOVIES,
          S.STUDIO_NAME,
          N.NATIONALITY_NAME,
          S.STUDIO_ID,
          N.NATIONALITY_ID
   FROM MOVIES M
   INNER JOIN NATIONALITIES N ON N.NATIONALITY_ID = M.NATIONALITY_ID
   INNER JOIN STUDIOS S ON S.STUDIO_ID = M.STUDIO_ID
   GROUP BY S.STUDIO_ID,
            N.NATIONALITY_ID
   ORDER BY S.STUDIO_ID ASC,
            NUM_MOVIES DESC) TOT
INNER JOIN
  (SELECT STUDIO_ID,
          MAX (NUM_MOVIES) AS NUM_MOVIES
   FROM
     (SELECT COUNT(N.NATIONALITY_ID) AS NUM_MOVIES,
             S.STUDIO_NAME,
             N.NATIONALITY_NAME,
             S.STUDIO_ID,
             N.NATIONALITY_ID
      FROM MOVIES M
      INNER JOIN NATIONALITIES N ON N.NATIONALITY_ID = M.NATIONALITY_ID
      INNER JOIN STUDIOS S ON S.STUDIO_ID = M.STUDIO_ID
      GROUP BY S.STUDIO_ID,
               N.NATIONALITY_ID
      ORDER BY S.STUDIO_ID ASC,
               NUM_MOVIES DESC)
   GROUP BY STUDIO_ID) MAX ON TOT.STUDIO_ID = MAX.STUDIO_ID
AND TOT.NUM_MOVIES = MAX.NUM_MOVIES
GROUP BY STUDIO_NAME

       
--37- Indica cuál fue la primera película a la que accedieron los miembros de la plataforma cuyos teléfonos tengan como último dígito el ID de alguna nacionalidad
WITH PHONE_DIGIT AS
  (SELECT USER_NAME,
          USER_ID,
          SUBSTR(USER_PHONE, LENGTH(USER_PHONE), 1) AS LAST_NUMBER
   FROM USERS),
     USER_NAT AS
  (SELECT N.NATIONALITY_ID,
          M.USER_NAME,
          M.USER_ID
   FROM NATIONALITIES N
   INNER JOIN PHONE_DIGIT M ON N.NATIONALITY_ID = M.LAST_NUMBER),
     MOVIE_ACCESS AS
  (SELECT UN.NATIONALITY_ID,
          UN.USER_NAME,
          UMA.USER_ID,
          UMA.MOVIE_ID,
          UMA.ACCESS_DATE
   FROM USER_NAT UN
   INNER JOIN USER_MOVIE_ACCESS UMA ON UN.USER_ID = UMA.USER_ID),
     MIN_ACCESS AS
  (SELECT USER_ID,
          MIN(ACCESS_DATE) AS ACCESS_DATE
   FROM MOVIE_ACCESS
   GROUP BY USER_ID)
SELECT MOA.USER_NAME,
       M.MOVIE_NAME
FROM MOVIE_ACCESS MOA
INNER JOIN MIN_ACCESS MIA ON MOA.ACCESS_DATE = MIA.ACCESS_DATE
AND MOA.USER_ID = MIA.USER_ID
INNER JOIN MOVIES M ON MOA.MOVIE_ID = M.MOVIE_ID